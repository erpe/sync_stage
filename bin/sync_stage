#!/usr/bin/env ruby

require 'sync_stage'
require 'getoptlong'


opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--init', '-i', GetoptLong::NO_ARGUMENT ],
  [ '--run', '-r', GetoptLong::NO_ARGUMENT ],
  [ '--destination', '-d', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--from', '-f', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--type', '-t', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--app', '-a', GetoptLong::REQUIRED_ARGUMENT ]
)

app = nil
init = nil
run = false
destination = nil
source = nil

if ARGV.length == 0
  puts "missing argument try --help" 
end

opts.each do |opt, arg|
  case opt
  when '--help'
    puts <<-EOF
      sync_stage [OPTION] 
          
      -h, --help:
      show help

      -t TYPE, --type TYPE:
      supply type op operation  
      either: dbcopy | dbsync | assetcopy | assetsync
      default is dbcopy

      -f FROM, --from FROM:
      set copy source: one of staging or production

      -d TO, --destination TO:
      set destination to copy to: either staging or production


      --init, -i:
      initializes sync_stage config in current directory
      or in --dir if --dir is given
      
      --app DIR, -a DIR:
      use given Directory 
    EOF
    exit 0
  when '--app'
    app = arg
  when '--init'
    init = true
  when '--run'
    run = true
  when '--destination'
    destination = arg
  when '--from'
    source = arg
  end
end


if init && run 
  puts "incompatible arguments -i and -r"
  exit 0
end

if init 
  st = SyncStage::Worker.new(app||Dir.pwd, init)
  exit 0
end

if app && !run
  puts "missing argument -r to run"
end


if run
  st = SyncStage::Worker.new(app||Dir.pwd)
  st.print_config
end
