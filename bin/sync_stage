#!/usr/bin/env ruby

require 'sync_stage'
require 'getoptlong'
require 'ostruct'

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--init', '-i', GetoptLong::NO_ARGUMENT ],
  [ '--run', '-r', GetoptLong::NO_ARGUMENT ],
  [ '--restore', GetoptLong::NO_ARGUMENT ],
  [ '--explain', GetoptLong::NO_ARGUMENT],
  [ '--app', '-a', GetoptLong::REQUIRED_ARGUMENT ]
)

app = nil
init = nil
run = nil
restore = nil
explain = nil

if ARGV.length == 0
  puts "missing argument try --help" 
end

opts.each do |opt, arg|
  case opt
  when '--help'
    puts <<-EOF
      sync_stage [OPTION] 
          
      -h, --help:
      show help

      --init, -i:
      initializes sync_stage config in current directory
      or in --dir if --dir is given
      
      --explain:
      print out what would happen, but dont actually run the commands

      --run, -r:
      actually start the dump, pack, copy over to destination

      
      --app DIR, -a DIR:
      use given Directory 

      --restore:
      pg_restore the database and unpack shared/public
      on destination system

      *To prevent trouble* - in case it does not work:
      
      run 
      
      sync_stage -r --restore --explain

      and run every single command manually. Make sure it works manually. 


    EOF
    exit 0
  when '--app'
    app = arg
  when '--init'
    init = true
  when '--run'
    run = true
  when '--restore'
    restore = true
  when '--explain'
    explain = true
  end
end


if init && run 
  puts "incompatible arguments -i and -r"
  exit 0
end

if init 
  cfg = OpenStruct.new(app: app||Dir.pwd, init: true)
  st = SyncStage::Worker.new(cfg)
  exit 0
end

if app && !run
  puts "missing argument -r to run"
end

if run
  cfg = OpenStruct.new(app: app||Dir.pwd, run: run, restore: restore, explain: explain)
  st = SyncStage::Worker.new(cfg)
end
